import java.io.IOException;
import java.util.ArrayList;

public class SegmentList {
    protected ArrayList<Segment> list;

    public SegmentList() {
        ArrayList<Segment> ar=new ArrayList<>();
        list=ar;
    }

    /**
     * building a list based on the set of segments specified in the text file.
      * @param filename file path
     * @throws IOException
     */
    public SegmentList(String filename) throws IOException {
        SegmentReader in = new SegmentReader(filename);
        ArrayList<Segment> ar = new ArrayList<>();
        this.list = ar;
        Segment seg=new Segment();
        while ((seg=in.readSegment())!=null) {
            if (uniqueSegment(seg)){
                list.add(seg);
            }
        }
    }

    /**
     * checking the segment for uniqueness
     * @param segment segment which is checked for uniqueness
     * @return true if there is no such segment in the list
     */
    private boolean uniqueSegment(Segment segment){
        for(Segment seg: list){
            if (seg.equals(segment))
                return false;
        }
        return true;
    }

    /**Adding a segment to the list
     * Add if there is no such segment in the list
     * @param seg segment which is need to add
     */
    public void insert(Segment seg){
        if (uniqueSegment(seg)){
            list.add(seg);
        }
    }


    /**
     * Output of all segments and information about them
     */
    public void show(){
        list.forEach((n) ->
            System.out.println("Segment :\n "+n));
    }

    /**
     * Adding a segment to the list.Only for the program.
     * @param seg seg is inserted segment
     */
    private void add(Segment seg){
        list.add(seg);
    }
    /**
     * Building a new Segmentlist in which all segments are tilted to the abscissa by 30 or 45 degrees
     * @return  Segmentlist in which all segments are tilted to the abscissa by 30 or 45 degrees
     */
   public SegmentList angleList(){
       final double EPSILON=0.e-10;
       SegmentList ans= new SegmentList();
       for (Segment seg: list) {
           if ((seg.angle()<= 30+EPSILON)&&(seg.angle()>= 30-EPSILON )||
                   (seg.angle()>= 45-EPSILON) && (seg.angle())<=45+EPSILON) {
               ans.add(seg);
           }
       }
       return ans;
   }


    /**
     * Build a new list of segments which length is not less than a and not more than b
     * @param a minimum length
     * @param b maximum length
     * @return new list of segments which length is not less than a and not more than b
     * throw IllegalArgumentException if minimum length<0 or maximum length<minimum length
     */

   public SegmentList lengthList(int a, int b){
       final double EPSILON=0.e-10;
       if ((b<a)||(a<0))
           throw new IllegalArgumentException();
       SegmentList ans= new SegmentList();
       for(Segment seg: list){
           if ((seg.length()>=a-EPSILON)||(seg.length()<=b+EPSILON))
               ans.add(seg);
       }
       return ans;
   }


    /**
     * Sorting a list in ascending order of segment lengths
     */
    public void sort(){
        Segment s=new Segment();
        for (int i = list.size()-1 ; i >= 1; i--){
            for (int j = 0; j < i; j++){
                if(list.get(i).length() < list.get(j).length()) {
                    s = list.get(i);
                    list.set(i, list.get(j));
                    list.set(j, s);
                }
            }
        }
    }
   

}
