import java.io.EOFException;
import java.io.IOException;
import java.util.ArrayList;

public class SegmentList {
    protected ArrayList<Segment> list;

    public SegmentList() {
        ArrayList<Segment> ar=new ArrayList<>();
        list=ar;
    }

    /**
     * building a list based on the set of segments specified in the text file.
      * @param filename file path
     * @throws IOException
     */
    public SegmentList(String filename) throws IOException, EOFException {
        SegmentReader in = new SegmentReader(filename);
        ArrayList<Segment> ar = new ArrayList<>();
        this.list = ar;
        Segment seg=new Segment();
        while ((seg=in.readSegment())!=null) {
            int i=0;
            boolean flag=true;
            while ((flag)&&(i<list.size())){
                if (list.get(i).equals(seg)){
                    flag=false;
                }
                i++;
            }
            if (flag){
                list.add(seg);
            }
        }
    }


    /**Adding a segment to the list
     * Add if there is no such segment in the list
     * @param seg segment which is need to add
     */
    public void insert(Segment seg){
        int i=0;
        boolean flag=true;
        while ((flag)&&(i<list.size())){
            if (list.get(i).equals(seg)){
                flag=false;
            }
            i++;
        }
        if (flag){
            list.add(seg);
        }

    }


    /**
     * Output of all segments and information about them
     */
    public void show(){
        list.forEach((n) ->
            System.out.println("Segment :\n "+n));
    }

    /**
     * Adding a segment to the list.Only for the program. Not available for users
     * @param seg what should be inserted
     */
    private void add(Segment seg){
        list.add(seg);
    }
    /**
     * Building a new Segmentlist in which all segments are tilted to the abscissa by 30 or 45 degrees
     * @return  Segmentlist in which all segments are tilted to the abscissa by 30 or 45 degrees
     */
   public SegmentList angleList(){
       final double EPSILON=0.e-10;
       SegmentList ans= new SegmentList();
       for (Segment seg: list) {
           if ((seg.slant()<=30+ EPSILON)&&(seg.slant()>=30-EPSILON)||(seg.slant()>=45- EPSILON)&&(seg.slant()<=45+ EPSILON)) {
               ans.add(seg);
           }
       }
       return ans;
   }


    /**
     * Build a new list of segments whose length is not less than a and not more than b
     * @param a minimum length
     * @param b maximum length
     * @return new list of segments whose length is not less than a and not more than b
     * throw IllegalArgumentException if minimum length<0 or maximum length<minimum length
     */

   public SegmentList lengthList(int a, int b){
       final double EPSILON=0.e-10;
       if ((b<a)||(a<0))
           throw new IllegalArgumentException();
       SegmentList ans= new SegmentList();
       for(Segment seg: list){
           if ((seg.length()>=a-EPSILON)||(seg.length()<=b+EPSILON))
               ans.add(seg);
       }
       return ans;
   }



    /**
     * Sorting a list in ascending order of segment lengths
     */
    public void sort(){
        Segment s=new Segment();
        for (int i = list.size() - 1; i >= 1; i--){
            for (int j = 0; j < i; j++){
                if(list.get(j).length() > list.get(j+1).length())
                   s=list.get(j);
                    list.set(j, list.get(j+1));
                    list.set(j+1,s);
            }
        }
    }
}
